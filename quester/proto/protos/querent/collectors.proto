syntax = "proto3";

package querent.collectors;


// CollectorConfig is a message to hold configuration for a collector.
message CollectorConfig {
  // Name of the collector.
  string name = 1;
  // Backend to be used by the collector.
  SupportedSources backend = 2;
  // Additional configuration for the collector.
  map<string, string> config = 3;
}

// SupportedSources is a message to hold supported sources for collectors.
message SupportedSources {
  // Azure configuration.
  AzureCollectorConfig azure = 1;
  // GCS configuration.
  GCSCollectorConfig gcs = 2;
  // S3 configuration.
  S3CollectorConfig s3 = 3;
  // Jira configuration.
  JiraCollectorConfig jira = 4;
  // Google Drive configuration.
  GoogleDriveCollectorConfig drive = 5;
  // Email configuration.
  EmailCollectorConfig email = 6;
  // DropBox configuration.
  DropBoxCollectorConfig dropbox = 7;
  // Github configuration.
  GithubCollectorConfig github = 8;
  // Slack configuration.
  SlackCollectorConfig slack = 9;
  // News configuration.
  NewsCollectorConfig news = 10;
}

// AzureCollectorConfig is a message to hold configuration for an Azure collector.
message AzureCollectorConfig {
  // Account URL of the Azure collector.
  string account_url = 1;
  // Connection string of the Azure collector.
  string connection_string = 2;
  // Container of the Azure collector.
  string container = 3;
  // Credentials of the Azure collector.
  string credentials = 4;
  // Prefix of the Azure collector.
  string prefix = 5;
  // Chunk size of the Azure collector.
  int64 chunk_size = 6;
}

// GCSCollectorConfig is a message to hold configuration for a GCS collector.
message GCSCollectorConfig {
  // Bucket of the GCS collector.
  string bucket = 1;
  // Credentials of the GCS collector.
  string credentials = 2;
}

// S3CollectorConfig is a message to hold configuration for an S3 collector.
message S3CollectorConfig {
  // Access key of the S3 collector.
  string access_key = 1;
  // Secret key of the S3 collector.
  string secret_key = 2;
  // Region of the S3 collector.
  string region = 3;
  // Bucket of the S3 collector.
  string bucket = 4;
}

// JiraCollectorConfig is a message to hold configuration for a Jira collector.
message JiraCollectorConfig {
  // Server of the Jira collector.
  string jira_server = 1;
  // Username of the Jira collector.
  string jira_username = 2;
  // Password of the Jira collector.
  string jira_password = 3;
  // API token of the Jira collector.
  string jira_api_token = 4;
  // Certificate file of the Jira collector.
  string jira_certfile = 5;
  // Key file of the Jira collector.
  string jira_keyfile = 6;
  // Verify of the Jira collector.
  bool jira_verify = 7;
  // Project of the Jira collector.
  string jira_project = 8;
  // Query of the Jira collector.
  string jira_query = 9;
  // Start at of the Jira collector.
  int32 jira_start_at = 10;
  // Max results of the Jira collector.
  int32 jira_max_results = 11;
}

// GoogleDriveCollectorConfig is a message to hold configuration for a Google Drive collector.
message GoogleDriveCollectorConfig {
  // Client ID of the Google Drive collector.
  string drive_client_id = 1;
  // Client secret of the Google Drive collector.
  string drive_client_secret = 2;
  // Refresh token of the Google Drive collector.
  string drive_refresh_token = 3;
  // Scopes of the Google Drive collector.
  string drive_scopes = 4;
  // Token of the Google Drive collector.
  string drive_token = 5;
  // Folder to crawl of the Google Drive collector.
  string folder_to_crawl = 6;
  // Specific file type of the Google Drive collector.
  string specific_file_type = 7;
}

// EmailCollectorConfig is a message to hold configuration for an Email collector.
message EmailCollectorConfig {
  // Server of the Email collector.
  string imap_server = 1;
  // Port of the Email collector.
  int32 imap_port = 2;
  // Username of the Email collector.
  string imap_username = 3;
  // Password of the Email collector.
  string imap_password = 4;
  // Folder of the Email collector.
  string imap_folder = 5;
  // Key file of the Email collector.
  string imap_keyfile = 6;
  // Cert file of the Email collector.
  string imap_certfile = 7;
}

// DropBoxCollectorConfig is a message to hold configuration for a DropBox collector.
message DropBoxCollectorConfig {
  // App key of the DropBox collector.
  string dropbox_app_key = 1;
  // App secret of the DropBox collector.
  string dropbox_app_secret = 2;
  // Refresh token of the DropBox collector.
  string dropbox_refresh_token = 3;
  // Folder path of the DropBox collector.
  string folder_path = 4;
}

// GithubCollectorConfig is a message to hold configuration for a Github collector.
message GithubCollectorConfig {
  // Username of the Github collector.
  string github_username = 1;
  // Access token of the Github collector.
  string github_access_token = 2;
  // Repository of the Github collector.
  string repository = 3;
}

// SlackCollectorConfig is a message to hold configuration for a Slack collector.
message SlackCollectorConfig {
  // Access token of the Slack collector.
  string access_token = 1;
  // Channel name of the Slack collector.
  string channel_name = 2;
  // Cursor of the Slack collector.
  string cursor = 3;
  // Include all metadata of the Slack collector.
  bool include_all_metadata = 4;
  // Includive of the Slack collector.
  bool includive = 5;
  // Limit of the Slack collector.
  int64 limit = 6;
}

// NewsCollectorConfig is a message to hold configuration for a News collector.
message NewsCollectorConfig {
  // API key of the News collector.
  string api_key = 1;
  // Query of the News collector.
  string query = 2;
  // From date of the News collector.
  string from_date = 3;
  // To date of the News collector.
  string to_date = 4;
  // Language of the News collector.
  string language = 5;
  // Domains of the News collector.
  string domains = 6;
  // Exclude domains of the News collector.
  string exclude_domains = 7;
  // Sources of the News collector.
  string sources = 8;
}

