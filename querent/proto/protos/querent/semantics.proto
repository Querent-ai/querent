syntax = "proto3";

package querent.semantics;

service SemanticsService {
  rpc StartPipeline(SemanticPipelineRequest) returns (SemanticPipelineResponse) {}
  rpc ObservePipeline(EmptyObserve) returns (SemanticServiceCounters) {}
  rpc GetPipelinesMetadata(EmptyGetPipelinesMetadata) returns (PipelinesMetadata) {}
  rpc StopPipeline(StopPipelineRequest) returns (BooleanResponse) {}
  rpc DescribePipeline(DescribePipelineRequest) returns (IndexingStatistics) {}
  rpc IngestTokens(SendIngestedTokens) returns (BooleanResponse) {}
  rpc RestartPipeline(RestartPipelineRequest) returns (BooleanResponse) {}
  rpc PostCollectors(CollectorConfig) returns (CollectorConfigResponse) {}
  rpc DeleteCollectors(DeleteCollectorRequest) returns (DeleteCollectorResponse) {}
  rpc ListCollectors(ListCollectorRequest) returns (ListCollectorConfig) {}
  rpc ListPipelineInfo(EmptyList) returns (PipelineRequestInfoList) {}
}

message PipelineRequestInfoList {
  repeated PipelineRequestInfo requests = 1;
}

message PipelineRequestInfo { 
  string pipeline_id = 1;
  SemanticPipelineRequest request = 2;  
}

message EmptyObserve{}
message EmptyList{}
message EmptyGetPipelinesMetadata{}

message StopPipelineRequest {
  string pipeline_id = 1;
}

message DescribePipelineRequest {
  string pipeline_id = 1;
}

message RestartPipelineRequest {
  string pipeline_id = 1;
}

message CollectorConfigResponse {
  string id = 1;
}

message DeleteCollectorRequest {
  repeated string id = 1;
}

message DeleteCollectorResponse {
  repeated string id = 1;
}

message ListCollectorRequest {}

message ListCollectorConfig {
  repeated CollectorConfig config = 1;
}

message SemanticPipelineRequest {
  repeated string collectors = 1;
  optional FixedEntities fixed_entities = 2;
  optional SampleEntities sample_entities = 3;
  optional Model model = 4;
}

enum Model {
  BERT = 0;
  GeoBert = 1;
  PubMedBert = 2;
}

message FixedEntities {
  repeated string entities = 1;
}

message SampleEntities {
  repeated string entities = 1;
}

message SemanticPipelineResponse {
  string pipeline_id = 1;
}

message SemanticServiceCounters {
  int32 num_running_pipelines = 1;
  int32 num_successful_pipelines = 2;
  int32 num_failed_pipelines = 3;
}

message IngestedTokens {
  string file = 1;
  repeated string data = 2;
  bool is_token_stream = 3;
  string doc_source = 4;
  string source_id = 5;
  optional string image_id = 6;
}

message SendIngestedTokens {
  string pipeline_id = 1;
  repeated IngestedTokens tokens = 2;
}

message IndexingStatistics {
  uint32 total_docs = 1;
  uint32 total_events = 2;
  uint32 total_events_processed = 3;
  uint32 total_events_received = 4;
  uint32 total_events_sent = 5;
  uint32 total_batches = 6;
  uint32 total_sentences = 7;
  uint32 total_subjects = 8;
  uint32 total_predicates = 9;
  uint32 total_objects = 10;
  uint32 total_graph_events = 11;
  uint32 total_vector_events = 12;
  uint32 total_data_processed_size = 13;
}

message PipelineMetadata {
  string pipeline_id = 1;
}

message PipelinesMetadata {
  repeated PipelineMetadata pipelines = 1;
}

message BooleanResponse {
  bool response = 1;
}

// Collectors 

// CollectorConfig is a message to hold configuration for a collector.
// Defines a collector with a specific configuration.
message CollectorConfig {
  string name = 1;
  oneof backend {
    AzureCollectorConfig azure = 2;
    GCSCollectorConfig gcs = 3;
    S3CollectorConfig s3 = 4;
    JiraCollectorConfig jira = 5;
    GoogleDriveCollectorConfig drive = 6;
    EmailCollectorConfig email = 7;
    DropBoxCollectorConfig dropbox = 8;
    GithubCollectorConfig github = 9;
    SlackCollectorConfig slack = 10;
    NewsCollectorConfig news = 11;
    FileCollectorConfig files = 12;
    OneDriveConfig onedrive = 13;
    NotionConfig notion = 14;
    OSDUServiceConfig osdu = 15;
  }
}

// FileCollectorConfig is a message to hold configuration for a file collector.
message FileCollectorConfig {
  string root_path = 1;
  // Id for the collector
  string id = 2;
}

// AzureCollectorConfig is a message to hold configuration for an Azure collector.
message AzureCollectorConfig {
  // Connection string of the Azure collector.
  string connection_string = 1;
  // Container of the Azure collector.
  string container = 2;
  // Credentials of the Azure collector.
  string credentials = 3;
  // Prefix of the Azure collector.
  string prefix = 4;
  // Id for the collector
  string id = 5;
}

// GCSCollectorConfig is a message to hold configuration for a GCS collector.
message GCSCollectorConfig {
  // Bucket of the GCS collector.
  string bucket = 1;
  // Credentials of the GCS collector.
  string credentials = 2;
  // Id for the collector
  string id = 3;
}

// S3CollectorConfig is a message to hold configuration for an S3 collector.
message S3CollectorConfig {
  // Access key of the S3 collector.
  string access_key = 1;
  // Secret key of the S3 collector.
  string secret_key = 2;
  // Region of the S3 collector.
  string region = 3;
  // Bucket of the S3 collector.
  string bucket = 4;
  // Id for the collector
  string id = 5;
}

// JiraCollectorConfig is a message to hold configuration for a Jira collector.
message JiraCollectorConfig {
  // URL of the server, for example :- https://querent.atlassian.net
  string jira_server = 1;
  // Email associated with the API key
  string jira_email = 2;
  // Jira API key
  string jira_api_key = 3;
  // Project of the Jira collector.
  string jira_project = 4;
  // Id for the collector
  string id = 5;
}

// GoogleDriveCollectorConfig is a message to hold configuration for a Google Drive collector.
message GoogleDriveCollectorConfig {
  // Client ID of the Google Drive collector.
  string drive_client_id = 1;
  // Client secret of the Google Drive collector.
  string drive_client_secret = 2;
  // Refresh token of the Google Drive collector.
  string drive_refresh_token = 3;
  // Folder to crawl of the Google Drive collector.
  string folder_to_crawl = 4;
  // Id for the collector
  string id = 5;
}

// EmailCollectorConfig is a message to hold configuration for an Email collector.
message EmailCollectorConfig {
  // Server of the Email collector.
  string imap_server = 1;
  // Port of the Email collector.
  int32 imap_port = 2;
  // Username of the Email collector.
  string imap_username = 3;
  // Password of the Email collector.
  string imap_password = 4;
  // Folder of the Email collector.
  string imap_folder = 5;
  // Id for the collector
  string id = 6;
}

// DropBoxCollectorConfig is a message to hold configuration for a DropBox collector.
message DropBoxCollectorConfig {
  // App key of the DropBox collector.
  string dropbox_app_key = 1;
  // App secret of the DropBox collector.
  string dropbox_app_secret = 2;
  // Refresh token of the DropBox collector.
  string dropbox_refresh_token = 3;
  // Folder path of the DropBox collector.
  string folder_path = 4;
  // Id for the collector
  string id = 5;
}

// GithubCollectorConfig is a message to hold configuration for a Github collector.
message GithubCollectorConfig {
  // Username of the Github collector.
  string github_username = 1;
  // Access token of the Github collector.
  string github_access_token = 2;
  // Repository of the Github collector.
  string repository = 3;
  // Id for the collector
  string id = 4;
}

// SlackCollectorConfig is a message to hold configuration for a Slack collector.
message SlackCollectorConfig {
  // Access token of the Slack collector.
  string access_token = 1;
  // Channel name of the Slack collector.
  string channel_name = 2;
  // Specify the beginning of the time range for messages
  optional string oldest = 3;
  // Inclusive of the Slack collector.
  optional bool inclusive = 4;
  // Specify the end of the time range for messages
  optional string latest = 5;
  // Id for the collector
  string id = 6;
}

enum QueryType {
  everything = 0;
  topheadlines = 1;
}

enum SortBy {
  relevancy = 0;
  popularity = 1;
  publishedAt = 2;
}

// NewsCollectorConfig is a message to hold configuration for a News collector.
message NewsCollectorConfig {
  // API key of the News collector.
  string api_key = 1;
  // Query of the News collector.
  optional string query = 2;
  // Query type of the News collector.
  QueryType query_type = 3;
  // Comma separated sources of the news representing news sources or blogs
  optional string sources = 4;
  // From date of the News collector.
  optional string from_date = 5;
  // To date of the News collector.
  optional string to_date = 6;
  // Language of the News collector.
  optional string language = 7;
  // Sort by for the News Collector
  optional SortBy sort_by = 8;
  // Comma-seperated string of Domains of the News Collector
  optional string domains = 9;
  // Id for the collector
  string id = 10;
   // A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to remove from the results.
  optional string exclude_domains = 11;
  // The fields to restrict your q search to. The possible options are: title, description, content. Multiple options can be specified by separating them with a comma, for example: title,content.
  optional string search_in = 12;
  // Page Size of the News Response
  optional int32 page_size = 13;
  // The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: us. Note: you can't mix this param with the sources param.
  optional string country = 14;
  // The category you want to get headlines for. Possible options: business, entertainment, general, health, science, sports, technology. Note: you can't mix this param with the sources param.
  optional string category = 15;
}

message OneDriveConfig {
  // Client ID of the app
  string client_id = 1;
  // Client secret of the app
  string client_secret = 2;
  // Redirect URI
  string redirect_uri = 3;
  // Refresh token of the app
  string refresh_token = 4;
  /// Folder path of the app
  string folder_path = 5;
  /// Id for the collector
  string id = 6;
}


message NotionConfig {
  // API key of the notion
  string api_key = 1;
  // Query id to the notion API/ either page id or database id
  repeated string page_ids = 2;
  /// Id for the collector
  string id = 3;
}

message OSDUServiceConfig {
  // Base Host URL of the OSDU Storage Service
  string base_url = 1;
  // Version of the OSDU Storage Service
  string storage_version = 2;
  // Version of OSDU Schema Service
  string schema_version = 3;
  // Version of OSDU File Service
  string file_version = 4;
  // Data partition id to query
  string data_partition_id = 5;
  // Service Account Key for token generation
  string service_account_key = 6;
  // Scopes for the OSDU Service
  repeated string scopes = 7;
  // Optional x-collaboration
  optional string x_collaboration = 8;
  // Optional correlation id
  optional string correlation_id = 9;
  // Optional specify record kinds to model 
  repeated RecordKind record_kinds = 10;
}

message RecordKind {
  // Record Kind Name
  string name = 1;
  // File extension
  string file_extension = 2;
}