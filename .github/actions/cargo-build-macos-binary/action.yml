name: "Build Querent binary for macOS"
description: "Build React app and Rust binary for macOS with cargo build."
inputs:
  target:
    description: "Target"
    required: true
  version:
    description: "Binary version"
    required: true
  token:
    description: "GitHub access token"
    required: true
runs:
  using: "composite"
  steps:
    - run: echo "ASSET_FULL_NAME=rian-${{ inputs.version }}-${{ inputs.target }}" >> $GITHUB_ENV
      shell: bash 
    - name: Import Apple Developer Certificate
      shell: bash
      env:
        APPLE_CERTIFICATE: ${{ env.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ env.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
      run: |
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        security find-identity -v -p codesigning build.keychain
    - name: Verify Certificate
      shell: bash
      run: |
        CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution")
        CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
        echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
        echo "Certificate imported."
    - name: Install protoc
      run: brew install protobuf
      shell: bash
    - name: Install libpq and postgresql16
      run: |
        brew install --skip-post-install postgresql@16 libpq
        brew link --force --overwrite postgresql@16
        echo "export PQ_LIB_DIR=$(brew --prefix libpq)/lib" >> ~/.bash_profile
      shell: bash
    - name: Install rustup
      shell: bash
      run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y
    - name: Install Rust Toolchain
      run: rustup toolchain install nightly
      shell: bash
    - name: Add target aarch64-apple-darwin
      if: "${{ inputs.target == 'aarch64-apple-darwin' }}"
      run: rustup target add aarch64-apple-darwin
      shell: bash
      working-directory: ./querent
    - name: Add target x86_64-apple-darwin
      if: "${{ inputs.target == 'x86_64-apple-darwin' }}"
      run: rustup target add x86_64-apple-darwin
      shell: bash
      working-directory: ./querent
    - name: Retrieve and export commit date, hash, and tags
      run: |
        echo "QUERENT_COMMIT_DATE=$(TZ=UTC0 git log -1 --format=%cd --date=format-local:%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "QUERENT_COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "QUERENT_COMMIT_TAGS=$(git tag --points-at HEAD | tr '\n' ',')" >> $GITHUB_ENV
      shell: bash
    # - name: Build binary
    #   run: cargo build --release  --target ${{ matrix.target }} --features "license-check","openssl-support" --bin rian
    #   shell: bash
    #   working-directory: ./querent
    #   env:
    #     QUERENT_COMMIT_DATE: ${{ env.QUERENT_COMMIT_DATE }}
    #     QUERENT_COMMIT_HASH: ${{ env.QUERENT_COMMIT_HASH }}
    #     QUERENT_COMMIT_TAGS: ${{ env.QUERENT_COMMIT_TAGS }}
    #     GITHUB_TOKEN: ${{ inputs.token }}
    # - name: Bundle archive
    #   run: |
    #     make archive BINARY_FILE=target/${{ inputs.target }}/release/rian \
    #       BINARY_VERSION=${{ inputs.version }} ARCHIVE_NAME=${{ env.ASSET_FULL_NAME }}
    #   shell: bash
    #   working-directory: ./querent
    # - name: Save binary archive for three days
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.ASSET_FULL_NAME }}.tar.gz
    #     path: ./querent/${{ env.ASSET_FULL_NAME }}.tar.gz
