/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	/**
	 * @returns { Promise<[boolean, UpdateResult | null]> }
	 */
	async getUpdateResult() {
		return await TAURI_INVOKE('get_update_result');
	},
	/**
	 * @returns { Promise<boolean> }
	 */
	async checkIfServiceIsRunning() {
		return await TAURI_INVOKE('check_if_service_is_running');
	},
	/**
	 * @returns { Promise<boolean> }
	 */
	async hasRianLicenseKey() {
		return await TAURI_INVOKE('has_rian_license_key');
	},
	/**
	 * @param { string } key
	 * @returns { Promise<boolean> }
	 */
	async setRianLicenseKey(key) {
		return await TAURI_INVOKE('set_rian_license_key', { key });
	},
	/**
	 * @param { CollectorConfig[] } collectors
	 * @returns { Promise<boolean> }
	 */
	async setCollectors(collectors) {
		return await TAURI_INVOKE('set_collectors', { collectors });
	},
	/**
	 * @returns { Promise<ListCollectorConfig> }
	 */
	async getCollectors() {
		return await TAURI_INVOKE('get_collectors');
	},
	/**
	 * @param { SemanticPipelineRequest } request
	 * @returns { Promise<Result<SemanticPipelineResponse, string>> }
	 */
	async startAgnFabric(request) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('start_agn_fabric', { request }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<([string, SemanticPipelineRequest])[]> }
	 */
	async getRunningAgns() {
		return await TAURI_INVOKE('get_running_agns');
	},
	/**
	 * @param { string } pipelineId
	 * @returns { Promise<Result<null, string>> }
	 */
	async stopAgnFabric(pipelineId) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('stop_agn_fabric', { pipelineId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @param { string } searchQuery
	 * @param { string[] } topPairs
	 * @returns { Promise<Result<DiscoveryResponse, string>> }
	 */
	async sendDiscoveryRetrieverRequest(searchQuery, topPairs) {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('send_discovery_retriever_request', { searchQuery, topPairs })
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<Result<InsightInfo[], string>> }
	 */
	async listAvailableInsights() {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('list_available_insights') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<Result<InsightRequestInfoList, string>> }
	 */
	async listPastInsights() {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('list_past_insights') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @param { InsightAnalystRequest } request
	 * @returns { Promise<Result<InsightAnalystResponse, string>> }
	 */
	async triggerInsightAnalyst(request) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('trigger_insight_analyst', { request }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<([string, InsightAnalystRequest])[]> }
	 */
	async getRunningInsightAnalysts() {
		return await TAURI_INVOKE('get_running_insight_analysts');
	},
	/**
	 * @param { string } sessionId
	 * @returns { Promise<Result<null, string>> }
	 */
	async stopInsightAnalyst(sessionId) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('stop_insight_analyst', { sessionId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @param { InsightQuery } request
	 * @returns { Promise<Result<InsightQueryResponse, string>> }
	 */
	async promptInsightAnalyst(request) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('prompt_insight_analyst', { request }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<Result<PipelineRequestInfoList, string>> }
	 */
	async getPastAgns() {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_past_agns') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<Result<[string, string], string>> }
	 */
	async getDriveCredentials() {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_drive_credentials') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @param { DeleteCollectorRequest } id
	 * @returns { Promise<boolean> }
	 */
	async deleteCollectors(id) {
		return await TAURI_INVOKE('delete_collectors', { id });
	},
	/**
	 * @param { IngestedTokens[] } tokens
	 * @param { string } pipelineId
	 * @returns { Promise<boolean> }
	 */
	async ingestTokens(tokens, pipelineId) {
		return await TAURI_INVOKE('ingest_tokens', { tokens, pipelineId });
	},
	/**
	 * @param { string } pipelineId
	 * @returns { Promise<Result<IndexingStatistics, string>> }
	 */
	async describePipeline(pipelineId) {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('describe_pipeline', { pipelineId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	},
	/**
	 * @returns { Promise<Result<string, string>> }
	 */
	async startOauthServer() {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('start_oauth_server') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e };
		}
	}
};

/** user-defined events **/

/**
 * @type {typeof __makeEvents__<{
 * checkUpdateEvent: CheckUpdateEvent
 * checkUpdateResultEvent: CheckUpdateResultEvent
 * pinnedFromWindowEvent: PinnedFromWindowEvent
 * }>}
 */

const __typedMakeEvents__ = __makeEvents__;

export const events = __typedMakeEvents__({
	checkUpdateEvent: 'check-update-event',
	checkUpdateResultEvent: 'check-update-result-event',
	pinnedFromWindowEvent: 'pinned-from-window-event'
});

/** user-defined constants **/

export const universalConstant = 42;

/** user-defined types **/

/**
 * AzureCollectorConfig is a message to hold configuration for an Azure collector.
 * @typedef { { connection_string: string; container: string; credentials: string; prefix: string; id: string } } AzureCollectorConfig
 */

/**
 * @typedef { { azure: AzureCollectorConfig } | { gcs: GcsCollectorConfig } | { s3: S3CollectorConfig } | { jira: JiraCollectorConfig } | { drive: GoogleDriveCollectorConfig } | { email: EmailCollectorConfig } | { dropbox: DropBoxCollectorConfig } | { github: GithubCollectorConfig } | { slack: SlackCollectorConfig } | { news: NewsCollectorConfig } | { files: FileCollectorConfig } | { onedrive: OneDriveConfig } | { notion: NotionConfig } } Backend
 */

/**
 * @typedef { null } CheckUpdateEvent
 */

/**
 * @typedef { UpdateResult } CheckUpdateResultEvent
 */

/**
 * CollectorConfig is a message to hold configuration for a collector.
 * Defines a collector with a specific configuration.
 * @typedef { { name: string; backend: Backend | null } } CollectorConfig
 */

/**
 * @typedef { string } Custom
 */

/**
 * A custom option for insights.
 * @typedef { { id: string; label: string; tooltip: string | null; value: InsightCustomOptionValue } } CustomInsightOption
 */

/**
 * @typedef { { id: string[] } } DeleteCollectorRequest
 */

/**
 * Response message containing insights discovered from the data
 * @typedef { { session_id: string; query: string; insights: Insight[]; page_ranking: number } } DiscoveryResponse
 */

/**
 * DropBoxCollectorConfig is a message to hold configuration for a DropBox collector.
 * @typedef { { dropbox_app_key: string; dropbox_app_secret: string; dropbox_refresh_token: string; folder_path: string; id: string } } DropBoxCollectorConfig
 */

/**
 * EmailCollectorConfig is a message to hold configuration for an Email collector.
 * @typedef { { imap_server: string; imap_port: number; imap_username: string; imap_password: string; imap_folder: string; id: string } } EmailCollectorConfig
 */

/**
 * FileCollectorConfig is a message to hold configuration for a file collector.
 * @typedef { { root_path: string; id: string } } FileCollectorConfig
 */

/**
 * @typedef { { entities: string[] } } FixedEntities
 */

/**
 * GCSCollectorConfig is a message to hold configuration for a GCS collector.
 * @typedef { { bucket: string; credentials: string; id: string } } GcsCollectorConfig
 */

/**
 * GithubCollectorConfig is a message to hold configuration for a Github collector.
 * @typedef { { github_username: string; github_access_token: string; repository: string; id: string } } GithubCollectorConfig
 */

/**
 * GoogleDriveCollectorConfig is a message to hold configuration for a Google Drive collector.
 * @typedef { { drive_client_id: string; drive_client_secret: string; drive_refresh_token: string; folder_to_crawl: string; id: string } } GoogleDriveCollectorConfig
 */

/**
 * @typedef { { total_docs: number; total_events: number; total_events_processed: number; total_events_received: number; total_events_sent: number; total_batches: number; total_sentences: number; total_subjects: number; total_predicates: number; total_objects: number; total_graph_events: number; total_vector_events: number; total_data_processed_size: number } } IndexingStatistics
 */

/**
 * @typedef { { file: string; data: string[]; is_token_stream: boolean; doc_source: string; source_id: string; image_id: string | null } } IngestedTokens
 */

/**
 * Represents an insight discovered from the data
 * @typedef { { document: string; source: string; relationship_strength: string; sentence: string; tags: string; top_pairs: string[] } } Insight
 */

/**
 * @typedef { { id: string; discovery_session_id: string | null; semantic_pipeline_id: string | null; additional_options: { [key in string]: string } } } InsightAnalystRequest
 */

/**
 * @typedef { { session_id: string } } InsightAnalystResponse
 */

/**
 * Possible custom option values for insights.
 * @typedef { { type: "boolean"; value: boolean } | { type: "number"; min: number; max: number; step: number; value: number } | { type: "string"; value: string; hidden: boolean | null } | { type: "option"; values: string[]; value: string } | { type: "button" } } InsightCustomOptionValue
 */

/**
 * Insight Information.
 * @typedef { { id: string; name: string; description: string; version: string; conversational: boolean; author: string; license: string; iconifyIcon: string; additionalOptions: { [key in string]: CustomInsightOption }; premium: boolean } } InsightInfo
 */

/**
 * @typedef { { session_id: string; query: string } } InsightQuery
 */

/**
 * @typedef { { session_id: string; query: string; response: string } } InsightQueryResponse
 */

/**
 * @typedef { { session_id: string; request: InsightAnalystRequest | null } } InsightRequestInfo
 */

/**
 * @typedef { { requests: InsightRequestInfo[] } } InsightRequestInfoList
 */

/**
 * JiraCollectorConfig is a message to hold configuration for a Jira collector.
 * @typedef { { jira_server: string; jira_username: string; jira_password: string; jira_api_token: string; jira_certfile: string; jira_keyfile: string; jira_verify: boolean; jira_project: string; jira_query: string; jira_start_at: number; jira_max_results: number; id: string } } JiraCollectorConfig
 */

/**
 * @typedef { { config: CollectorConfig[] } } ListCollectorConfig
 */

/**
 * NewsCollectorConfig is a message to hold configuration for a News collector.
 * @typedef { { api_key: string; query: string; query_type: number; sources: string | null; from_date: string | null; to_date: string | null; language: string | null; sort_by: number | null; page_size: number | null; page: number | null; domains: string | null; id: string } } NewsCollectorConfig
 */

/**
 * @typedef { { api_key: string; query_type: number; query_id: string; id: string } } NotionConfig
 */

/**
 * @typedef { { client_id: string; client_secret: string; redirect_uri: string; refresh_token: string; folder_path: string; id: string } } OneDriveConfig
 */

/**
 * @typedef { { pinned: boolean } } PinnedFromWindowEvent
 */

/**
 * @typedef { { pipeline_id: string; request: SemanticPipelineRequest | null } } PipelineRequestInfo
 */

/**
 * @typedef { { requests: PipelineRequestInfo[] } } PipelineRequestInfoList
 */

/**
 * S3CollectorConfig is a message to hold configuration for an S3 collector.
 * @typedef { { access_key: string; secret_key: string; region: string; bucket: string; id: string } } S3CollectorConfig
 */

/**
 * @typedef { { entities: string[] } } SampleEntities
 */

/**
 * @typedef { { collectors: string[]; fixed_entities: FixedEntities | null; sample_entities: SampleEntities | null; model: number | null } } SemanticPipelineRequest
 */

/**
 * @typedef { { pipeline_id: string } } SemanticPipelineResponse
 */

/**
 * SlackCollectorConfig is a message to hold configuration for a Slack collector.
 * @typedef { { access_token: string; channel_name: string; cursor: string; include_all_metadata: boolean; includive: boolean; limit: number; id: string } } SlackCollectorConfig
 */

/**
 * @typedef { { version: string; currentVersion: string; body: string | null } } UpdateResult
 */

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE, Channel as TAURI_CHANNEL } from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';

/** @typedef {typeof import("@tauri-apps/api/window").WebviewWindowHandle} __WebviewWindowHandle__ */

/**
 * @template T
 * @typedef {{
 *   listen: (
 *	   cb: TAURI_API_EVENT.EventCallback<T>
 *	 ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
 *	 once: (
 *	   cb: TAURI_API_EVENT.EventCallback<T>
 *	 ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
 *	 emit: T extends null
 *	   ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
 *     : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
 *	}} __EventObj__<T>
 */

/**
 * @template T,E
 * @typedef { { status: "ok", data: T } | { status: "error", error: E } } Result
 */

/**
 * @template {Record<string, any>} T
 * @param {Record<keyof T, string>} mappings
 * @returns {{
 * 	 [K in keyof T]: __EventObj__<T[K]> & {
 *	   (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
 *   };
 * }}
 */
function __makeEvents__(mappings) {
	return new Proxy(
		{},
		{
			get: (_, event) => {
				const name = mappings[event];

				new Proxy(() => {}, {
					apply: (_, __, [window]) => ({
						listen: (arg) => window.listen(name, arg),
						once: (arg) => window.once(name, arg),
						emit: (arg) => window.emit(name, arg)
					}),
					get: (_, command) => {
						switch (command) {
							case 'listen':
								return (arg) => TAURI_API_EVENT.listen(name, arg);
							case 'once':
								return (arg) => TAURI_API_EVENT.once(name, arg);
							case 'emit':
								return (arg) => TAURI_API_EVENT.emit(name, arg);
						}
					}
				});
			}
		}
	);
}
